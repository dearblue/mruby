crctable_path = File.join(MRUBY_ROOT, "include/mruby/crctable.h")

def generate_crctable(table, round_no)
  table.each_with_object("").with_index do |(t, s), r|
    s << "\n  " if r > 0
    s << "{ /* round #{r + round_no} */\n"
    t.each_slice(8).with_index do |tt, i|
      s << "\n" if i > 0
      s << "    "
      s << tt.map { |e| "0x%04xU," % e }.join(" ")
    end
    s << "\n  },"
  end
end

task :crctable => [crctable_path]

file crctable_path => [__FILE__] do
  poly = 0x11021
  slicebits = 4
  rounds = 8
  bitoff = 16 - slicebits
  table = []
  galois_symbols = 1 << slicebits

  table << galois_symbols.times.map { |i|
    i <<= bitoff
    slicebits.times {
      i <<= 1
      i ^= poly unless i[16].zero?
    }
    i & 0xffff
  }

  (1...rounds).step {
    table << galois_symbols.times.map { |i|
      n = table[-1][i]
      0xffff & (n << slicebits) ^ table[0][n >> bitoff]
    }
  }

  File.open(crctable_path, "wb") do |file|
    file << <<-"CRCTABLE_H"
/*
** This file is CRC lookup table, and used by src/crc.c.
**
** IMPORTANT:
**   This file was generated by `rake crctable`.
**   All manual changes will get lost.
*/

#include <stdint.h>

static const uint16_t crctable[][#{galois_symbols}] =
{
  #{generate_crctable(table[0...2], 1)}
#if defined(MRB_CRC_FAST)
  #{generate_crctable(table[2..-1], 3)}
#endif /* MRB_CRC_FAST */
};
    CRCTABLE_H
  end
end
